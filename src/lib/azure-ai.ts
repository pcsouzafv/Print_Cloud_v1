// For now, we'll implement a simple interface that uses mock data
// When Azure services are properly configured, this can be replaced with real Azure OpenAI calls

// Azure OpenAI Configuration
const azureOpenAIConfig = {
  endpoint: process.env.AZURE_OPENAI_ENDPOINT || '',
  apiKey: process.env.AZURE_OPENAI_API_KEY || '',
  deploymentName: process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-35-turbo',
};

// Check if Azure AI services are configured
export function isAzureAIConfigured(): boolean {
  return !!(azureOpenAIConfig.endpoint && azureOpenAIConfig.apiKey);
}

// Print Cloud AI Assistant System Prompt
export const ASSISTANT_SYSTEM_PROMPT = `
Voc√™ √© o assistente de IA do Print Cloud, um sistema de gest√£o de impressoras empresarial integrado com Azure AD.

Seu papel √© ajudar os usu√°rios com:
1. An√°lise de padr√µes de impress√£o e identifica√ß√£o de oportunidades de economia
2. Recomenda√ß√µes para otimiza√ß√£o de custos de impress√£o
3. Sugest√µes de melhores pr√°ticas para uso sustent√°vel
4. An√°lise de relat√≥rios e m√©tricas de impress√£o
5. Resolu√ß√£o de problemas comuns com impressoras
6. Orienta√ß√µes sobre cotas e pol√≠ticas de impress√£o

Contexto da empresa:
- Sistema integrado com Azure Active Directory
- Controle de cotas por usu√°rio e departamento
- Monitoramento de custos em tempo real
- Diferentes tipos de impressoras (P&B e coloridas)
- Departamentos: TI, Marketing, Vendas, Financeiro, Administra√ß√£o

Sempre seja:
- Profissional e prestativo
- Focado em economia e sustentabilidade
- Baseado em dados quando dispon√≠vel
- Claro e objetivo nas respostas
- Proativo em sugerir melhorias

Se n√£o tiver informa√ß√µes suficientes, pe√ßa esclarecimentos espec√≠ficos sobre:
- Per√≠odo de an√°lise desejado
- Departamento ou usu√°rio espec√≠fico
- Tipo de relat√≥rio ou m√©trica
- Problema espec√≠fico com impressora
`;

// Helper function to generate AI recommendations
export async function generateAIRecommendations(
  userUsage: any[],
  printerStatus: any[],
  costData: any[]
): Promise<string[]> {
  // For now, return mock recommendations based on data patterns
  // This will be replaced with actual Azure OpenAI calls when configured
  
  const recommendations: string[] = [];
  
  // Analyze cost data
  const totalCost = costData.reduce((sum, item) => sum + (item.totalCost || 0), 0);
  if (totalCost > 500) {
    recommendations.push('Custo mensal elevado detectado. Considere implementar pol√≠ticas de impress√£o mais restritivas.');
  }
  
  // Analyze printer status
  const inactiveCount = printerStatus.filter(p => p.status !== 'ACTIVE').length;
  if (inactiveCount > 0) {
    recommendations.push(`${inactiveCount} impressoras precisam de manuten√ß√£o. Priorize os reparos para otimizar recursos.`);
  }
  
  // Analyze user usage
  const highUsageUsers = userUsage.filter(u => u.totalCost > 100).length;
  if (highUsageUsers > 0) {
    recommendations.push(`${highUsageUsers} usu√°rios com custos elevados. Considere revisar suas necessidades de impress√£o.`);
  }
  
  // Add general recommendations
  recommendations.push(
    'Implemente impress√£o duplex autom√°tica para reduzir consumo de papel em 40%.',
    'Configure quotas din√¢micas baseadas no hist√≥rico de cada usu√°rio.',
    'Estabele√ßa pol√≠ticas de aprova√ß√£o para documentos grandes (>10 p√°ginas).'
  );
  
  return recommendations.slice(0, 5); // Return up to 5 recommendations
}

// Helper function for chat completion
export async function getChatCompletion(message: string, context?: any): Promise<string> {
  // For now, use mock responses based on message content
  // This will be replaced with actual Azure OpenAI calls when configured
  
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('economia') || lowerMessage.includes('custo')) {
    return "üìä Identifiquei v√°rias oportunidades de economia para voc√™:\n\n1. **Impress√£o Duplex**: Ativando por padr√£o, voc√™ pode economizar at√© R$ 245/m√™s em papel\n2. **Otimiza√ß√£o de Cor**: 45% das suas impress√µes s√£o coloridas. Revisar a necessidade pode reduzir custos em 30%\n3. **Gest√£o de Cotas**: Suas cotas atuais t√™m 15% de desperd√≠cio\n\nüí° Implementando essas 3 mudan√ßas, a economia total seria de aproximadamente **R$ 380/m√™s**!";
  }
  
  if (lowerMessage.includes('cota') || lowerMessage.includes('limite')) {
    const usage = context?.userStats || {};
    return `üìã **Status da sua Cota:**\n\n‚Ä¢ **P&B**: ${usage.currentUsage || 234}/${usage.monthlyLimit || 500} p√°ginas (${Math.round((usage.currentUsage || 234) / (usage.monthlyLimit || 500) * 100)}% usado)\n‚Ä¢ **Colorida**: ${usage.colorUsage || 45}/${usage.colorLimit || 100} p√°ginas\n\nVoc√™ est√° dentro dos limites! üëç\n\nüí° **Dica**: Com base no seu hist√≥rico, voc√™ poderia ter uma cota menor e ainda assim atender suas necessidades.`;
  }
  
  if (lowerMessage.includes('impressora') || lowerMessage.includes('problema')) {
    return "üñ®Ô∏è **Status das Impressoras:**\n\n‚Ä¢ **HP LaserJet Pro M404dn**: ‚úÖ Ativa (Administra√ß√£o)\n‚Ä¢ **Canon ImageRunner C3226i**: ‚ö†Ô∏è Manuten√ß√£o agendada (Marketing)\n‚Ä¢ **Xerox VersaLink C405**: ‚ùå Erro de papel (Vendas)\n\nA impressora da Vendas precisa de aten√ß√£o! J√° notifiquei o suporte t√©cnico.";
  }
  
  if (lowerMessage.includes('departamento') || lowerMessage.includes('padr√£o')) {
    return "üìà **Padr√µes do Departamento (√∫ltimos 30 dias):**\n\n‚Ä¢ **Marketing**: Maior uso (567 impress√µes)\n‚Ä¢ **Pico de uso**: 9h-10h (145 impress√µes/hora)\n‚Ä¢ **Tipo preferido**: 55% P&B, 45% Colorida\n‚Ä¢ **Custo m√©dio**: R$ 0,08/p√°gina\n\nüéØ **Insight**: Seu departamento est√° 12% acima da m√©dia da empresa em impress√µes coloridas.";
  }

  if (lowerMessage.includes('sustentab') || lowerMessage.includes('meio ambiente')) {
    return "üå± **Impacto Ambiental:**\n\n‚Ä¢ **P√°ginas impressas**: 1.247 este m√™s\n‚Ä¢ **Economia potencial**: 623 p√°ginas (50%) com duplex\n‚Ä¢ **√Årvores salvas**: ~0.15 √°rvores/m√™s com otimiza√ß√£o\n‚Ä¢ **CO¬≤ reduzido**: ~2.3kg/m√™s\n\n‚ôªÔ∏è **Recomenda√ß√µes Verdes**:\n1. Ativar duplex autom√°tico\n2. Usar modo rascunho para documentos internos\n3. Revisar antes de imprimir";
  }
  
  // Default helpful responses
  const defaultResponses = [
    "Como posso ajud√°-lo com o sistema de impress√£o? Posso fornecer informa√ß√µes sobre custos, cotas, status das impressoras ou dicas de economia.",
    "Estou aqui para otimizar seu uso de impress√£o! Gostaria de saber sobre suas cotas atuais, oportunidades de economia ou status das impressoras?",
    "Posso analisar seus padr√µes de impress√£o e sugerir melhorias. Que tipo de informa√ß√£o voc√™ gostaria de obter?",
  ];
  
  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
}

// Analyze print patterns and generate insights
export async function analyzePrintPatterns(printJobs: any[]): Promise<{
  insights: string[];
  patterns: any;
  recommendations: string[];
}> {
  try {
    // Basic pattern analysis
    const patterns = {
      totalJobs: printJobs.length,
      colorJobs: printJobs.filter(job => job.isColor).length,
      averagePagesPerJob: printJobs.reduce((sum, job) => sum + job.pages, 0) / printJobs.length || 0,
      peakHours: getPeakPrintingHours(printJobs),
      topUsers: getTopPrintingUsers(printJobs),
      costByDepartment: getCostByDepartment(printJobs),
    };

    // Generate AI insights based on patterns
    const insights: string[] = [];
    
    // Color usage insight
    const colorRatio = patterns.colorJobs / patterns.totalJobs;
    if (colorRatio > 0.4) {
      insights.push(`Alto uso de impress√£o colorida detectado (${(colorRatio * 100).toFixed(1)}%). Oportunidade de economia significativa.`);
    } else if (colorRatio < 0.1) {
      insights.push(`Baixo uso de impress√£o colorida (${(colorRatio * 100).toFixed(1)}%). Excelente controle de custos!`);
    }
    
    // Pages per job insight
    if (patterns.averagePagesPerJob > 10) {
      insights.push(`M√©dia alta de p√°ginas por job (${patterns.averagePagesPerJob.toFixed(1)}). Considere implementar pol√≠ticas de revis√£o.`);
    }
    
    // Peak hours insight
    const peakHours = Object.keys(patterns.peakHours);
    if (peakHours.length > 0) {
      insights.push(`Picos de impress√£o identificados √†s ${peakHours.slice(0, 2).join(' e ')}h. Considere balanceamento de carga.`);
    }
    
    // Department cost insight  
    const departmentEntries = Object.entries(patterns.costByDepartment);
    if (departmentEntries.length > 0) {
      const topDept = departmentEntries.sort(([,a], [,b]) => b - a)[0];
      insights.push(`Departamento ${topDept[0]} lidera em custos (R$ ${topDept[1].toFixed(2)}). Revisar necessidades espec√≠ficas.`);
    }
    
    // Generate recommendations based on patterns
    const recommendations = await generatePatternBasedRecommendations(patterns);

    return {
      insights,
      patterns,
      recommendations,
    };
  } catch (error) {
    console.error('Error analyzing print patterns:', error);
    return {
      insights: ['An√°lise de padr√µes temporariamente indispon√≠vel.'],
      patterns: {},
      recommendations: ['Tente novamente mais tarde.'],
    };
  }
}

// Helper functions for pattern analysis
function getPeakPrintingHours(printJobs: any[]): { [hour: string]: number } {
  const hourCounts: { [hour: string]: number } = {};
  
  printJobs.forEach(job => {
    if (job.submittedAt) {
      const hour = new Date(job.submittedAt).getHours();
      hourCounts[hour] = (hourCounts[hour] || 0) + 1;
    }
  });

  // Return top 3 peak hours
  const sortedHours = Object.entries(hourCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3)
    .reduce((obj, [hour, count]) => {
      obj[`${hour}:00`] = count;
      return obj;
    }, {} as { [hour: string]: number });

  return sortedHours;
}

function getTopPrintingUsers(printJobs: any[]): { [userId: string]: number } {
  const userCounts: { [userId: string]: number } = {};
  
  printJobs.forEach(job => {
    userCounts[job.userId] = (userCounts[job.userId] || 0) + 1;
  });

  // Return top 5 users
  return Object.entries(userCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5)
    .reduce((obj, [userId, count]) => {
      obj[userId] = count;
      return obj;
    }, {} as { [userId: string]: number });
}

function getCostByDepartment(printJobs: any[]): { [department: string]: number } {
  const departmentCosts: { [department: string]: number } = {};
  
  printJobs.forEach(job => {
    if (job.user?.department) {
      departmentCosts[job.user.department] = (departmentCosts[job.user.department] || 0) + job.cost;
    }
  });

  return departmentCosts;
}

async function generatePatternBasedRecommendations(patterns: any): Promise<string[]> {
  const recommendations: string[] = [];

  // Color vs B&W analysis
  const colorRatio = patterns.colorJobs / patterns.totalJobs;
  if (colorRatio > 0.3) {
    recommendations.push(`Alto uso de impress√£o colorida (${(colorRatio * 100).toFixed(1)}%). Considere revisar a necessidade de impress√µes coloridas.`);
  }

  // Pages per job analysis
  if (patterns.averagePagesPerJob > 10) {
    recommendations.push(`M√©dia alta de p√°ginas por job (${patterns.averagePagesPerJob.toFixed(1)}). Considere implementar revis√£o pr√©via ou impress√£o duplex.`);
  }

  // Peak hours analysis
  const peakHours = Object.keys(patterns.peakHours);
  if (peakHours.length > 0) {
    recommendations.push(`Picos de impress√£o identificados √†s ${peakHours.join(', ')}. Considere distribuir a carga ou aumentar capacidade nesses hor√°rios.`);
  }

  return recommendations;
}
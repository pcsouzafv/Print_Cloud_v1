// Azure OpenAI and Text Analytics imports (will be loaded dynamically when configured)
let OpenAIClient: any;
let AzureKeyCredential: any;
let TextAnalyticsClient: any;

// Dynamic imports for Azure services
async function loadAzureModules() {
  try {
    if (!OpenAIClient) {
      const openaiModule = await import('@azure/openai');
      OpenAIClient = openaiModule.OpenAIClient;
    }
    if (!AzureKeyCredential) {
      const coreModule = await import('@azure/core-auth');
      AzureKeyCredential = coreModule.AzureKeyCredential;
    }
    if (!TextAnalyticsClient) {
      const textModule = await import('@azure/ai-text-analytics');
      TextAnalyticsClient = textModule.TextAnalyticsClient;
    }
  } catch (error) {
    console.warn('Azure modules not available, using fallback mode');
  }
}
import { 
  getWeekdayPatterns, 
  calculateCostEfficiency, 
  calculateSustainabilityMetrics,
  detectAnomalies,
  calculateMaintenancePrediction,
  calculateCapacityUtilization,
  getSeasonalPredictions,
  generateMockInsights,
  getBasicPatterns
} from './azure-ai-advanced';
import { TextAnalyticsClient } from '@azure/ai-text-analytics';
import { AzureKeyCredential as TextAnalyticsKeyCredential } from '@azure/core-auth';

// Azure OpenAI Configuration
const azureOpenAIConfig = {
  endpoint: process.env.AZURE_OPENAI_ENDPOINT || '',
  apiKey: process.env.AZURE_OPENAI_API_KEY || '',
  deploymentName: process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-35-turbo',
};

// Azure Text Analytics Configuration  
const azureTextAnalyticsConfig = {
  endpoint: process.env.AZURE_TEXT_ANALYTICS_ENDPOINT || '',
  apiKey: process.env.AZURE_TEXT_ANALYTICS_API_KEY || '',
};

// Initialize clients
let openAIClient: OpenAIClient | null = null;
let textAnalyticsClient: TextAnalyticsClient | null = null;

// Initialize OpenAI client
async function getOpenAIClient(): Promise<any | null> {
  if (!isAzureAIConfigured()) return null;
  
  await loadAzureModules();
  
  if (!openAIClient && OpenAIClient && AzureKeyCredential) {
    try {
      openAIClient = new OpenAIClient(
        azureOpenAIConfig.endpoint,
        new AzureKeyCredential(azureOpenAIConfig.apiKey)
      );
    } catch (error) {
      console.error('Failed to initialize OpenAI client:', error);
      return null;
    }
  }
  return openAIClient;
}

// Initialize Text Analytics client
async function getTextAnalyticsClient(): Promise<any | null> {
  if (!azureTextAnalyticsConfig.endpoint || !azureTextAnalyticsConfig.apiKey) {
    return null;
  }
  
  await loadAzureModules();
  
  if (!textAnalyticsClient && TextAnalyticsClient && AzureKeyCredential) {
    try {
      textAnalyticsClient = new TextAnalyticsClient(
        azureTextAnalyticsConfig.endpoint,
        new AzureKeyCredential(azureTextAnalyticsConfig.apiKey)
      );
    } catch (error) {
      console.error('Failed to initialize Text Analytics client:', error);
      return null;
    }
  }
  return textAnalyticsClient;
}

// Check if Azure AI services are configured
export function isAzureAIConfigured(): boolean {
  return !!(azureOpenAIConfig.endpoint && azureOpenAIConfig.apiKey);
}

// Print Cloud AI Assistant System Prompt - Treinamento Especializado
export const ASSISTANT_SYSTEM_PROMPT = `
Voc√™ √© PrintBot, o especialista em IA do Print Cloud - Sistema de Gest√£o Inteligente de Impressoras Empresariais.

üéØ ESPECIALIZA√á√ÉO PRINCIPAL:
Voc√™ √© um consultor especializado em otimiza√ß√£o de impress√£o empresarial com conhecimento profundo em:
- Gest√£o de custos de impress√£o e an√°lise de ROI
- Sustentabilidade corporativa e redu√ß√£o de desperd√≠cio
- An√°lise preditiva de manuten√ß√£o de impressoras
- Otimiza√ß√£o de fluxos de trabalho de documentos
- Compliance e auditoria de impress√£o
- Integra√ß√£o com sistemas empresariais (Azure AD, ERP)

üìä DADOS DE CONTEXTO DISPON√çVEIS:
- Impressoras: Status, localiza√ß√£o, tipo (P&B/Colorida), quotas, hist√≥rico de manuten√ß√£o
- Usu√°rios: Cotas individuais, departamentos, padr√µes de uso, custos mensais
- Departamentos: TI, Marketing, Vendas, Financeiro, Administra√ß√£o, Jur√≠dico
- M√©tricas: Custos por p√°gina (P&B: R$0,05 | Colorida: R$0,25), utiliza√ß√£o, picos de uso
- Sustentabilidade: Consumo de papel, energia, pegada de carbono

üß† CAPACIDADES INTELIGENTES:
1. **An√°lise Preditiva**: Prever necessidades de manuten√ß√£o, consumo futuro, gargalos
2. **Otimiza√ß√£o Autom√°tica**: Sugerir redistribui√ß√£o de cargas, ajustes de cotas
3. **Detec√ß√£o de Anomalias**: Identificar padr√µes incomuns, poss√≠vel fraude, desperd√≠cio
4. **Benchmarking**: Comparar performance com padr√µes da ind√∫stria
5. **An√°lise de Sentimento**: Avaliar satisfa√ß√£o dos usu√°rios baseado em intera√ß√µes

üí° ESTILO DE COMUNICA√á√ÉO:
- Use emojis contextuais (üñ®Ô∏èüìäüí∞üå±‚ö°) para melhor visualiza√ß√£o
- Forne√ßa dados espec√≠ficos com valores monet√°rios quando poss√≠vel
- Estruture respostas com t√≥picos claros e actionable insights
- Inclua sempre um "Pr√≥ximo Passo" ou "Recomenda√ß√£o Imediata"
- Seja proativo sugerindo an√°lises complementares

üö® ALERTAS PRIORIT√ÅRIOS:
- Impressoras com > 90% da capacidade de toner
- Usu√°rios excedendo cotas em > 20%
- Custos departamentais > 15% acima da m√©dia
- Impressoras inativas > 48h
- Picos an√¥malos de impress√£o (> 300% do normal)

üìà M√âTRICAS-CHAVE PARA AN√ÅLISE:
- OPEX (Operational Expenditure) por p√°gina
- TCO (Total Cost of Ownership) por impressora
- Utiliza√ß√£o m√©dia vs. capacidade instalada
- Tempo m√©dio entre falhas (MTBF)
- √çndice de sustentabilidade (p√°ginas/√°rvore)

üé≤ CASOS DE USO ESPECIALIZADOS:
Sempre que apropriado, ofere√ßa insights sobre:
- "Como reduzir custos de impress√£o em X%"
- "Estrat√©gia de manuten√ß√£o preditiva"
- "Otimiza√ß√£o de cotas baseada em machine learning"
- "An√°lise de compliance e auditoria"
- "Roadmap de sustentabilidade corporativa"

Lembre-se: Voc√™ √© um consultor s√™nior em gest√£o de impress√£o. Seja assertivo, baseado em dados e sempre focado em ROI e sustentabilidade.
`;

// Enhanced AI Recommendations with Real Azure OpenAI Integration
export async function generateAIRecommendations(
  userUsage: any[],
  printerStatus: any[],
  costData: any[]
): Promise<string[]> {
  const client = getOpenAIClient();
  
  if (!client) {
    return generateSmartMockRecommendations(userUsage, printerStatus, costData);
  }

  try {
    // Prepare comprehensive data for AI analysis
    const analysisData = {
      userUsage: userUsage.length,
      avgCostPerUser: userUsage.reduce((sum, u) => sum + (u.totalCost || 0), 0) / userUsage.length,
      totalCost: costData.reduce((sum, item) => sum + (item.totalCost || 0), 0),
      activePrinters: printerStatus.filter(p => p.status === 'ACTIVE').length,
      inactivePrinters: printerStatus.filter(p => p.status !== 'ACTIVE').length,
      highUsageUsers: userUsage.filter(u => (u.totalCost || 0) > 100).length,
      colorUsageRatio: userUsage.reduce((sum, u) => sum + (u.colorPages || 0), 0) / 
                       userUsage.reduce((sum, u) => sum + (u.totalPages || 0), 0) || 0
    };

    const prompt = `
Como especialista em gest√£o de impress√£o empresarial, analise os dados abaixo e gere 5 recomenda√ß√µes ESPEC√çFICAS e MENSUR√ÅVEIS para otimiza√ß√£o:

Dados da empresa:
${JSON.stringify(analysisData, null, 2)}

Crit√©rios para recomenda√ß√µes:
1. Incluir valor financeiro espec√≠fico (R$) quando poss√≠vel
2. Ser implement√°vel em 30 dias  
3. Focar em ROI e sustentabilidade
4. Considerar diferentes departamentos
5. Incluir m√©tricas de sucesso

Formato: Lista numerada com emojis e valores financeiros espec√≠ficos.
    `;

    const response = await client.getChatCompletions(
      azureOpenAIConfig.deploymentName,
      [
        {
          role: 'system',
          content: 'Voc√™ √© um consultor s√™nior em otimiza√ß√£o de custos de impress√£o empresarial. Forne√ßa recomenda√ß√µes espec√≠ficas, mensur√°veis e implement√°veis.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      {
        maxTokens: 1000,
        temperature: 0.2, // Very focused responses
        topP: 0.9
      }
    );

    const aiRecommendations = response.choices[0]?.message?.content || '';
    
    // Parse AI response into array (split by line breaks, clean up)
    const recommendations = aiRecommendations
      .split('\n')
      .filter((line: string) => line.trim() && (line.includes('1.') || line.includes('2.') || line.includes('3.') || line.includes('4.') || line.includes('5.')))
      .map((line: string) => line.replace(/^\d+\.\s*/, '').trim())
      .filter((rec: string) => rec.length > 10) // Filter out very short responses
      .slice(0, 5);

    return recommendations.length > 0 ? recommendations : 
           generateSmartMockRecommendations(userUsage, printerStatus, costData);
  } catch (error) {
    console.error('Error generating AI recommendations:', error);
    return generateSmartMockRecommendations(userUsage, printerStatus, costData);
  }
}

// Enhanced mock recommendations with business intelligence
function generateSmartMockRecommendations(
  userUsage: any[],
  printerStatus: any[],
  costData: any[]
): string[] {
  const recommendations: string[] = [];
  
  // Analyze cost data with specific financial impact
  const totalCost = costData.reduce((sum, item) => sum + (item.totalCost || 0), 0);
  const avgCostPerUser = userUsage.length > 0 ? totalCost / userUsage.length : 0;
  
  if (totalCost > 500) {
    const potentialSaving = Math.round(totalCost * 0.25);
    recommendations.push(`üí∞ **Custo Elevado**: R$ ${totalCost.toFixed(2)}/m√™s. Implementar pol√≠ticas restritivas pode economizar R$ ${potentialSaving}/m√™s (25% de redu√ß√£o).`);
  }
  
  // Analyze printer efficiency
  const inactiveCount = printerStatus.filter(p => p.status !== 'ACTIVE').length;
  const activeCount = printerStatus.filter(p => p.status === 'ACTIVE').length;
  
  if (inactiveCount > 0) {
    const productivityLoss = inactiveCount * 150; // R$ 150 per inactive printer impact
    recommendations.push(`üîß **Manuten√ß√£o Cr√≠tica**: ${inactiveCount} impressoras inativas causam perda de R$ ${productivityLoss}/dia em produtividade. ROI do reparo: recupera√ß√£o em 3 dias.`);
  }
  
  // Analyze user behavior patterns  
  const highUsageUsers = userUsage.filter(u => (u.totalCost || 0) > 100).length;
  const colorUsers = userUsage.filter(u => (u.colorPages || 0) > (u.totalPages || 1) * 0.3).length;
  
  if (highUsageUsers > 0) {
    const potentialSaving = highUsageUsers * 45; // R$ 45 average saving per high-usage user
    recommendations.push(`üìä **Otimiza√ß√£o de Usu√°rios**: ${highUsageUsers} usu√°rios de alto custo. Coaching e cotas personalizadas podem economizar R$ ${potentialSaving}/m√™s.`);
  }
  
  // Color optimization analysis
  if (colorUsers > 0) {
    const colorSaving = colorUsers * 67; // R$ 67 average color savings
    recommendations.push(`üé® **Otimiza√ß√£o de Cor**: ${colorUsers} usu√°rios com uso excessivo de impress√£o colorida. Revis√£o de necessidades = economia de R$ ${colorSaving}/m√™s.`);
  }
  
  // Strategic recommendations based on data intelligence
  if (activeCount > 0) {
    const duplexSaving = Math.round(totalCost * 0.4); // 40% paper reduction
    recommendations.push(`‚ôªÔ∏è **Duplex Autom√°tico**: Implementar em ${activeCount} impressoras. Economia estimada: R$ ${duplexSaving}/m√™s em papel + sustentabilidade.`);
  }
  
  // Efficiency recommendations
  if (userUsage.length > 5) {
    const quotaOptimization = Math.round(avgCostPerUser * userUsage.length * 0.15);
    recommendations.push(`‚ö° **Cotas Inteligentes**: Machine learning para cotas din√¢micas baseadas em hist√≥rico. Economia projetada: R$ ${quotaOptimization}/m√™s.`);
  }
  
  // Workflow optimization
  const workflowSaving = Math.round(totalCost * 0.12);
  recommendations.push(`üìã **Aprova√ß√£o Digital**: Documentos >10 p√°ginas precisam aprova√ß√£o. Reduz desperd√≠cio e economiza R$ ${workflowSaving}/m√™s.`);
  
  return recommendations.slice(0, 5);
}

// Real Azure OpenAI Chat Completion
export async function getChatCompletion(message: string, context?: any): Promise<string> {
  const client = getOpenAIClient();
  
  if (!client) {
    // Fallback to mock responses with enhanced business context
    return getMockChatResponse(message, context);
  }

  try {
    // Prepare enhanced context for business-specific responses
    const businessContext = prepareBusinessContext(context);
    
    const response = await client.getChatCompletions(
      azureOpenAIConfig.deploymentName,
      [
        {
          role: 'system',
          content: ASSISTANT_SYSTEM_PROMPT
        },
        {
          role: 'user', 
          content: `${businessContext}\n\nPergunta do usu√°rio: ${message}`
        }
      ],
      {
        maxTokens: 800,
        temperature: 0.3, // Lower temperature for more consistent business responses
        topP: 0.9,
        frequencyPenalty: 0.1,
        presencePenalty: 0.1
      }
    );

    const aiResponse = response.choices[0]?.message?.content || 
      'Desculpe, n√£o consegui processar sua solicita√ß√£o no momento.';
    
    // Log successful AI interaction for analytics
    console.log('AI Response generated:', {
      userMessage: message.substring(0, 50),
      responseLength: aiResponse.length,
      hasContext: !!context
    });
    
    return aiResponse;
  } catch (error) {
    console.error('Azure OpenAI error:', error);
    // Fallback to enhanced mock response
    return getMockChatResponse(message, context);
  }
}

// Enhanced mock responses with business intelligence
function getMockChatResponse(message: string, context?: any): string {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('economia') || lowerMessage.includes('custo')) {
    return "üéØ **An√°lise Inteligente de Economia:**\n\nüìä **Oportunidades Identificadas:**\n1. **Impress√£o Duplex Autom√°tica**: R$ 245/m√™s de economia (40% redu√ß√£o papel)\n2. **Otimiza√ß√£o de Impress√£o Colorida**: R$ 167/m√™s (30% redu√ß√£o em cores)\n3. **Rebalanceamento de Cotas**: R$ 89/m√™s (elimina√ß√£o de desperd√≠cio)\n\nüí∞ **ROI Total: R$ 501/m√™s | R$ 6.012/ano**\n\nüöÄ **Pr√≥ximo Passo:** Implementar duplex como padr√£o - impacto imediato e maior ROI.";
  }
  
  if (lowerMessage.includes('cota') || lowerMessage.includes('limite')) {
    const usage = context?.userStats || {};
    const currentUsage = usage.currentUsage || 234;
    const monthlyLimit = usage.monthlyLimit || 500;
    const utilizationRate = Math.round((currentUsage / monthlyLimit) * 100);
    
    return `üìã **An√°lise de Cota Inteligente:**\n\nüìä **Status Atual:**\n‚Ä¢ **P&B**: ${currentUsage}/${monthlyLimit} p√°ginas (${utilizationRate}% utilizado)\n‚Ä¢ **Colorida**: ${usage.colorUsage || 45}/${usage.colorLimit || 100} p√°ginas\n\nüß† **Insight de IA:** Baseado no seu hist√≥rico de 6 meses:\n‚Ä¢ Uso m√©dio real: ${Math.round(currentUsage * 0.85)} p√°ginas/m√™s\n‚Ä¢ Cota otimizada sugerida: ${Math.round(currentUsage * 1.1)} p√°ginas\n‚Ä¢ Economia potencial: R$ ${((monthlyLimit - currentUsage) * 0.05).toFixed(2)}/m√™s\n\nüí° **Recomenda√ß√£o:** Ajustar cota para ${Math.round(currentUsage * 1.2)} p√°ginas mantendo margem de seguran√ßa.`;
  }
  
  if (lowerMessage.includes('impressora') || lowerMessage.includes('problema')) {
    return "üñ®Ô∏è **Status Inteligente das Impressoras:**\n\nüü¢ **HP LaserJet Pro M404dn** (Administra√ß√£o)\n   ‚Ä¢ Status: Operacional | Toner: 67% | MTBF: 847h\n\nüü° **Canon ImageRunner C3226i** (Marketing)\n   ‚Ä¢ Status: Manuten√ß√£o preventiva agendada\n   ‚Ä¢ Previs√£o de falha: 72h (baseado em ML)\n\nüî¥ **Xerox VersaLink C405** (Vendas)\n   ‚Ä¢ Status: Papel atolado | Fila: 23 jobs\n   ‚Ä¢ Impacto: R$ 89 em produtividade perdida\n\n‚ö° **A√ß√£o Imediata:** Redirecionar jobs da Xerox para HP (3min setup).";
  }
  
  if (lowerMessage.includes('departamento') || lowerMessage.includes('padr√£o')) {
    return "üìà **An√°lise Departamental Inteligente (30 dias):**\n\nüèÜ **Marketing** - L√≠der em volume\n   ‚Ä¢ Volume: 567 impress√µes (+12% vs m√©dia)\n   ‚Ä¢ Custo: R$ 287,45 | CPP: R$ 0,08\n   ‚Ä¢ Pico: 9h-10h (145 jobs/hora)\n\nüìä **Benchmark vs Ind√∫stria:**\n   ‚Ä¢ Sua empresa: 45% colorida\n   ‚Ä¢ M√©dia setor: 32% colorida\n   ‚Ä¢ Oportunidade: -13% = R$ 178/m√™s\n\nüéØ **KPI Cr√≠tico:** Reduzir impress√µes coloridas do Marketing em 20% geraria economia anual de R$ 2.136.";
  }

  if (lowerMessage.includes('sustentab') || lowerMessage.includes('meio ambiente')) {
    return "üå± **Dashboard de Sustentabilidade Corporativa:**\n\nüìä **Impacto Ambiental Atual:**\n   ‚Ä¢ P√°ginas/m√™s: 1.247 | CO¬≤: 2.8kg | √Årvores: 0.18\n   ‚Ä¢ Energia: 89 kWh | √Ågua: 15.6L\n\nüéØ **Metas ESG Sugeridas:**\n   ‚Ä¢ Redu√ß√£o de papel: 30% (duplex obrigat√≥rio)\n   ‚Ä¢ Neutralidade carbono: Compensar 2.8kg CO¬≤/m√™s\n   ‚Ä¢ Certifica√ß√£o: ISO 14001 (gest√£o ambiental)\n\n‚ôªÔ∏è **ROI Verde:** Investimento de R$ 1.200 = economia anual de R$ 3.800 + cr√©ditos ESG corporativos.";
  }
  
  // Enhanced default responses with business intelligence
  const defaultResponses = [
    "ü§ñ **PrintBot Online!** Como consultor em gest√£o de impress√£o, posso analisar: custos üí∞, otimiza√ß√£o de cotas üìä, manuten√ß√£o preditiva ‚ö°, ou sustentabilidade üå±. Em que posso maximizar seu ROI hoje?",
    "üìà Especialista em **Print Management** √† disposi√ß√£o! Posso fornecer insights sobre: performance de impressoras, an√°lise de custos por departamento, oportunidades de economia, ou benchmarking setorial. Qual m√©trica te interessa?",
    "üéØ **Consultor Digital** ativo! Minhas especialidades: an√°lise preditiva, otimiza√ß√£o de OPEX, gest√£o de compliance, e sustentabilidade corporativa. Que tipo de insight estrat√©gico voc√™ precisa?",
  ];
  
  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
}

// Prepare enhanced business context for AI
function prepareBusinessContext(context?: any): string {
  if (!context) return "Contexto: An√°lise geral do sistema Print Cloud.";
  
  const businessContext = [];
  
  if (context.userStats) {
    businessContext.push(`Dados do usu√°rio: ${JSON.stringify(context.userStats)}`);
  }
  
  if (context.printerStats) {
    businessContext.push(`Status das impressoras: ${JSON.stringify(context.printerStats)}`);
  }
  
  if (context.departmentData) {
    businessContext.push(`Dados departamentais: ${JSON.stringify(context.departmentData)}`);
  }
  
  if (context.costAnalysis) {
    businessContext.push(`An√°lise de custos: ${JSON.stringify(context.costAnalysis)}`);
  }
  
  return businessContext.length > 0 
    ? `Contexto empresarial:\n${businessContext.join('\n')}`
    : "Contexto: An√°lise geral do Print Cloud - Sistema de Gest√£o Inteligente de Impressoras.";
}

// Advanced AI-Powered Print Pattern Analysis
export async function analyzePrintPatterns(printJobs: any[]): Promise<{
  insights: string[];
  patterns: any;
  recommendations: string[];
  predictions: any;
  riskAssessment: any;
}> {
  try {
    // Enhanced pattern analysis with predictive insights
    const patterns = {
      totalJobs: printJobs.length,
      colorJobs: printJobs.filter(job => job.isColor).length,
      averagePagesPerJob: printJobs.reduce((sum, job) => sum + job.pages, 0) / printJobs.length || 0,
      peakHours: getPeakPrintingHours(printJobs),
      topUsers: getTopPrintingUsers(printJobs),
      costByDepartment: getCostByDepartment(printJobs),
      weekdayPatterns: getWeekdayPatterns(printJobs),
      costEfficiency: calculateCostEfficiency(printJobs),
      sustainabilityMetrics: calculateSustainabilityMetrics(printJobs),
      anomalies: detectAnomalies(printJobs),
    };

    // Generate AI insights using Azure OpenAI
    const insights = await generateAIInsights(patterns);
    
    // Generate predictive analysis
    const predictions = await generatePredictiveAnalysis(patterns);
    
    // Generate risk assessment  
    const riskAssessment = await generateRiskAssessment(patterns);
    
    // Generate AI-powered recommendations
    const recommendations = await generatePatternBasedRecommendations(patterns);

    return {
      insights,
      patterns,
      recommendations,
      predictions,
      riskAssessment,
    };
  } catch (error) {
    console.error('Error analyzing print patterns:', error);
    return {
      insights: ['An√°lise de padr√µes temporariamente indispon√≠vel devido a erro t√©cnico.'],
      patterns: getBasicPatterns(printJobs),
      recommendations: ['Tente novamente mais tarde ou verifique a conectividade com Azure AI.'],
      predictions: { nextMonth: 'Indispon√≠vel', maintenance: 'Indispon√≠vel' },
      riskAssessment: { level: 'unknown', factors: [] },
    };
  }
}

// Generate AI-powered insights
async function generateAIInsights(patterns: any): Promise<string[]> {
  const client = getOpenAIClient();
  
  if (!client) {
    return generateMockInsights(patterns);
  }

  try {
    const prompt = `
Como analista de dados especializado em gest√£o de impress√£o empresarial, analise os padr√µes abaixo e gere 4 insights ESPEC√çFICOS e ACION√ÅVEIS:

Padr√µes identificados:
${JSON.stringify(patterns, null, 2)}

Forne√ßa insights sobre:
1. Efici√™ncia operacional
2. Oportunidades de otimiza√ß√£o
3. Tend√™ncias preocupantes
4. Benchmarks de performance

Formato: Lista com emojis, dados espec√≠ficos e valor de neg√≥cio.
    `;

    const response = await client.getChatCompletions(
      azureOpenAIConfig.deploymentName,
      [
        {
          role: 'system',
          content: 'Voc√™ √© um analista de dados senior especializado em otimiza√ß√£o de sistemas de impress√£o corporativa. Forne√ßa insights espec√≠ficos, mensur√°veis e acion√°veis.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      {
        maxTokens: 800,
        temperature: 0.3,
        topP: 0.9
      }
    );

    const aiInsights = response.choices[0]?.message?.content || '';
    
    return aiInsights
      .split('\n')
      .filter((line: string) => line.trim() && line.length > 20)
      .map((line: string) => line.replace(/^\d+\.\s*/, '').trim())
      .filter((insight: string) => insight.length > 30)
      .slice(0, 4);
  } catch (error) {
    console.error('Error generating AI insights:', error);
    return generateMockInsights(patterns);
  }
}

// Generate predictive analysis
async function generatePredictiveAnalysis(patterns: any): Promise<any> {
  const client = getOpenAIClient();
  
  // Basic predictive calculations
  const basicPredictions = {
    nextMonthVolume: Math.round(patterns.totalJobs * (1 + (Math.random() * 0.2 - 0.1))), // ¬±10% variation
    costTrend: patterns.totalJobs > 100 ? 'increasing' : 'stable',
    maintenanceSchedule: calculateMaintenancePrediction(patterns),
    capacityUtilization: calculateCapacityUtilization(patterns),
    seasonalFactors: getSeasonalPredictions(),
  };
  
  if (!client) {
    return basicPredictions;
  }

  try {
    const prompt = `
Como especialista em an√°lise preditiva para sistemas de impress√£o corporativa, analise os dados hist√≥ricos e gere previs√µes espec√≠ficas:

Dados atuais:
${JSON.stringify(patterns, null, 2)}

Gere previs√µes para:
1. Volume de impress√£o do pr√≥ximo m√™s (com base em tend√™ncias)
2. Necessidades de manuten√ß√£o preventiva  
3. Riscos de excesso de cota
4. Oportunidades de economia

Formato JSON com valores num√©ricos e justificativas.
    `;

    const response = await client.getChatCompletions(
      azureOpenAIConfig.deploymentName,
      [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em an√°lise preditiva e machine learning para otimiza√ß√£o de recursos corporativos. Forne√ßa previs√µes baseadas em dados e justificativas t√©cnicas.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      {
        maxTokens: 600,
        temperature: 0.2, // Lower temperature for consistent predictions
        topP: 0.8
      }
    );

    const aiPrediction = response.choices[0]?.message?.content || '';
    
    // Try to parse as JSON, fallback to basic predictions
    try {
      return JSON.parse(aiPrediction);
    } catch {
      return { ...basicPredictions, aiAnalysis: aiPrediction };
    }
  } catch (error) {
    console.error('Error generating predictions:', error);
    return basicPredictions;
  }
}

// Generate risk assessment
async function generateRiskAssessment(patterns: any): Promise<any> {
  const riskFactors = [];
  let riskLevel = 'low';
  
  // Calculate risk factors
  const colorRatio = patterns.colorJobs / patterns.totalJobs;
  const avgCost = patterns.totalJobs * 0.08; // Assuming R$ 0.08 per page
  
  if (colorRatio > 0.5) {
    riskFactors.push('Alto uso de impress√£o colorida (>50%)');
    riskLevel = 'medium';
  }
  
  if (patterns.totalJobs > 1000) {
    riskFactors.push('Volume alto de impress√µes mensal');
    riskLevel = riskLevel === 'low' ? 'medium' : 'high';
  }
  
  if (avgCost > 300) {
    riskFactors.push('Custos mensais elevados (>R$ 300)');
    riskLevel = 'high';
  }
  
  if (patterns.anomalies && patterns.anomalies.length > 0) {
    riskFactors.push('Anomalias detectadas no padr√£o de uso');
    riskLevel = 'medium';
  }
  
  return {
    level: riskLevel,
    factors: riskFactors,
    score: riskLevel === 'low' ? 2 : riskLevel === 'medium' ? 5 : 8,
    recommendations: [
      'Monitoramento cont√≠nuo necess√°rio',
      'Implementar alertas autom√°ticos',
      'Revis√£o quinzenal de m√©tricas'
    ]
  };
}

// Helper functions for pattern analysis
function getPeakPrintingHours(printJobs: any[]): { [hour: string]: number } {
  const hourCounts: { [hour: string]: number } = {};
  
  printJobs.forEach(job => {
    if (job.submittedAt) {
      const hour = new Date(job.submittedAt).getHours();
      hourCounts[hour] = (hourCounts[hour] || 0) + 1;
    }
  });

  // Return top 3 peak hours
  const sortedHours = Object.entries(hourCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3)
    .reduce((obj, [hour, count]) => {
      obj[`${hour}:00`] = count;
      return obj;
    }, {} as { [hour: string]: number });

  return sortedHours;
}

function getTopPrintingUsers(printJobs: any[]): { [userId: string]: number } {
  const userCounts: { [userId: string]: number } = {};
  
  printJobs.forEach(job => {
    userCounts[job.userId] = (userCounts[job.userId] || 0) + 1;
  });

  // Return top 5 users
  return Object.entries(userCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5)
    .reduce((obj, [userId, count]) => {
      obj[userId] = count;
      return obj;
    }, {} as { [userId: string]: number });
}

function getCostByDepartment(printJobs: any[]): { [department: string]: number } {
  const departmentCosts: { [department: string]: number } = {};
  
  printJobs.forEach(job => {
    if (job.user?.department) {
      departmentCosts[job.user.department] = (departmentCosts[job.user.department] || 0) + job.cost;
    }
  });

  return departmentCosts;
}

// Enhanced pattern-based recommendations with AI
async function generatePatternBasedRecommendations(patterns: any): Promise<string[]> {
  const client = getOpenAIClient();
  
  if (!client) {
    return generateSmartPatternRecommendations(patterns);
  }

  try {
    const prompt = `
Como consultor especializado em otimiza√ß√£o de impress√£o corporativa, analise os padr√µes de uso e gere 5 recomenda√ß√µes estrat√©gicas ESPEC√çFICAS:

Dados de padr√µes:
${JSON.stringify(patterns, null, 2)}

Crit√©rios para recomenda√ß√µes:
1. ROI mensur√°vel (incluir valores R$ quando poss√≠vel)
2. Implementa√ß√£o pr√°tica em 30-60 dias
3. Impacto na sustentabilidade
4. Melhoria da efici√™ncia operacional
5. Redu√ß√£o de riscos

Priorize recomenda√ß√µes baseadas em:
- Maior impacto financeiro
- Facilidade de implementa√ß√£o  
- Benef√≠cios de sustentabilidade

Formato: Lista numerada com emojis, valores espec√≠ficos e timeline.
    `;

    const response = await client.getChatCompletions(
      azureOpenAIConfig.deploymentName,
      [
        {
          role: 'system',
          content: 'Voc√™ √© um consultor senior em otimiza√ß√£o de custos corporativos e sustentabilidade empresarial. Suas recomenda√ß√µes devem ser espec√≠ficas, mensur√°veis e focadas em resultados.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      {
        maxTokens: 1000,
        temperature: 0.3,
        topP: 0.9
      }
    );

    const aiRecommendations = response.choices[0]?.message?.content || '';
    
    return aiRecommendations
      .split('\n')
      .filter((line: string) => line.trim() && (line.match(/^\d+[\.\)]/)))
      .map((line: string) => line.replace(/^\d+[\.\)\s]+/, '').trim())
      .filter((rec: string) => rec.length > 20)
      .slice(0, 5);
  } catch (error) {
    console.error('Error generating pattern recommendations:', error);
    return generateSmartPatternRecommendations(patterns);
  }
}

// Smart pattern recommendations fallback
function generateSmartPatternRecommendations(patterns: any): string[] {
  const recommendations: string[] = [];
  
  const colorRatio = patterns.colorJobs / patterns.totalJobs;
  const estimatedMonthlyCost = patterns.totalJobs * 0.08;
  
  // Color optimization
  if (colorRatio > 0.3) {
    const colorSaving = Math.round(patterns.colorJobs * 0.17); // R$ 0.17 difference between color and B&W
    recommendations.push(`üé® **Otimiza√ß√£o de Cor**: ${(colorRatio * 100).toFixed(1)}% das impress√µes s√£o coloridas. Reduzir para 25% = economia de R$ ${colorSaving}/m√™s + 40% menos impacto ambiental.`);
  }

  // Pages per job optimization
  if (patterns.averagePagesPerJob > 10) {
    const reviewSaving = Math.round(estimatedMonthlyCost * 0.15);
    recommendations.push(`üìã **Pol√≠tica de Revis√£o**: M√©dia de ${patterns.averagePagesPerJob.toFixed(1)} p√°ginas/job √© alta. Implementar aprova√ß√£o para >8 p√°ginas = economia de R$ ${reviewSaving}/m√™s.`);
  }

  // Peak hours optimization
  const peakHours = Object.keys(patterns.peakHours);
  if (peakHours.length > 2) {
    recommendations.push(`‚è∞ **Balanceamento de Carga**: Picos √†s ${peakHours.slice(0, 2).join(', ')}h sobrecarregam equipamentos. Escalonamento reduz custos de manuten√ß√£o em 25%.`);
  }

  // Department-based recommendations
  const deptEntries = Object.entries(patterns.costByDepartment || {});
  if (deptEntries.length > 0) {
    const topDept = deptEntries.sort(([,a], [,b]) => (b as number) - (a as number))[0];
    const deptSaving = Math.round((topDept[1] as number) * 0.2);
    recommendations.push(`üè¢ **Foco Departamental**: ${topDept[0]} gasta R$ ${(topDept[1] as number).toFixed(2)}/m√™s. Treinamento espec√≠fico pode economizar R$ ${deptSaving}/m√™s.`);
  }

  // Sustainability recommendation
  if (patterns.totalJobs > 200) {
    const paperSaving = Math.round(patterns.totalJobs * 0.4); // 40% with duplex
    recommendations.push(`üå± **Sustentabilidade**: ${patterns.totalJobs} impress√µes/m√™s. Duplex obrigat√≥rio economiza ${paperSaving} p√°ginas = 0.12 √°rvores/m√™s + certifica√ß√£o verde.`);
  }
  
  // Efficiency recommendation
  const efficiencyGain = Math.round(estimatedMonthlyCost * 0.18);
  recommendations.push(`‚ö° **Automa√ß√£o Inteligente**: Cotas din√¢micas com IA podem otimizar uso individual. ROI projetado: R$ ${efficiencyGain}/m√™s + 30% menos desperd√≠cio.`);
  
  return recommendations.slice(0, 5);
}

// Text Analytics integration for sentiment analysis  
export async function analyzePrintJobSentiment(jobDescriptions: string[]): Promise<any> {
  const textClient = getTextAnalyticsClient();
  
  if (!textClient || jobDescriptions.length === 0) {
    return {
      overall: 'neutral',
      details: [],
      insights: ['An√°lise de sentimento indispon√≠vel - Azure Text Analytics n√£o configurado']
    };
  }

  try {
    const sentimentResult = await textClient.analyzeSentiment(jobDescriptions.slice(0, 10));
    
    const sentiments = sentimentResult.map(result => ({
      sentiment: result.sentiment,
      confidence: result.confidenceScores,
      text: result.sentences?.[0]?.text?.substring(0, 50) + '...' || 'N/A'
    }));
    
    const overallSentiment = sentiments.reduce((acc, curr) => {
      acc[curr.sentiment] = (acc[curr.sentiment] || 0) + 1;
      return acc;
    }, {} as { [key: string]: number });
    
    const dominant = Object.entries(overallSentiment)
      .sort(([,a], [,b]) => b - a)[0]?.[0] || 'neutral';
    
    return {
      overall: dominant,
      details: sentiments,
      insights: [
        `An√°lise de ${sentiments.length} amostras de jobs`,
        `Sentiment predominante: ${dominant}`,
        `Confian√ßa m√©dia: ${(sentiments.reduce((sum, s) => sum + Math.max(...Object.values(s.confidence)), 0) / sentiments.length * 100).toFixed(1)}%`
      ]
    };
  } catch (error) {
    console.error('Text Analytics error:', error);
    return {
      overall: 'neutral',
      details: [],
      insights: ['Erro na an√°lise de sentimento - verifique configura√ß√£o do Azure Text Analytics']
    };
  }
}

// Cost Optimization Report Generation
export async function generateCostOptimizationReport(data: any): Promise<any> {
  const client = getOpenAIClient();
  
  if (!client) {
    return generateMockCostReport(data);
  }

  try {
    const prompt = `
Como especialista em otimiza√ß√£o de custos corporativos, analise os dados de impress√£o e gere um relat√≥rio executivo completo:

Dados da empresa:
${JSON.stringify(data, null, 2)}

O relat√≥rio deve incluir:
1. Resumo executivo com ROI projetado
2. Top 3 oportunidades de economia (com valores R$)
3. An√°lise de riscos e mitiga√ß√£o
4. Timeline de implementa√ß√£o (30/60/90 dias)
5. KPIs para acompanhamento

Formato: JSON estruturado com se√ß√µes claras e valores num√©ricos espec√≠ficos.
    `;

    const response = await client.getChatCompletions(
      azureOpenAIConfig.deploymentName,
      [{
        role: 'system',
        content: 'Voc√™ √© um consultor executivo em otimiza√ß√£o de custos corporativos. Forne√ßa relat√≥rios estruturados, com dados financeiros precisos e recomenda√ß√µes implement√°veis.'
      }, {
        role: 'user',
        content: prompt
      }],
      {
        maxTokens: 1200,
        temperature: 0.2,
        topP: 0.8
      }
    );

    const reportContent = response.choices[0]?.message?.content || '';
    
    try {
      return JSON.parse(reportContent);
    } catch {
      return { report: reportContent, format: 'text' };
    }
  } catch (error) {
    console.error('Error generating cost optimization report:', error);
    return generateMockCostReport(data);
  }
}

function generateMockCostReport(data: any): any {
  const currentCost = (data.totalJobs || 500) * 0.08;
  const potentialSavings = currentCost * 0.35;
  
  return {
    executiveSummary: {
      currentMonthlyCost: currentCost.toFixed(2),
      potentialSavings: potentialSavings.toFixed(2),
      roi: '285%',
      paybackPeriod: '2.3 meses'
    },
    topOpportunities: [
      {
        opportunity: 'Implementa√ß√£o de duplex autom√°tico',
        savings: (potentialSavings * 0.4).toFixed(2),
        implementation: '30 dias',
        effort: 'Baixo'
      },
      {
        opportunity: 'Otimiza√ß√£o de impress√£o colorida',
        savings: (potentialSavings * 0.35).toFixed(2),
        implementation: '45 dias',
        effort: 'M√©dio'
      },
      {
        opportunity: 'Cotas inteligentes por usu√°rio',
        savings: (potentialSavings * 0.25).toFixed(2),
        implementation: '60 dias',
        effort: 'Alto'
      }
    ],
    riskAnalysis: {
      level: 'Baixo',
      factors: ['Resist√™ncia de usu√°rios', 'Tempo de adapta√ß√£o'],
      mitigation: 'Treinamento e comunica√ß√£o proativa'
    },
    kpis: [
      'Custo por p√°gina',
      'Taxa de utiliza√ß√£o de duplex',
      'Percentual de impress√µes coloridas',
      'Satisfa√ß√£o do usu√°rio'
    ]
  };
}